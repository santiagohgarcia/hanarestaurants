service {
	/*
		RESTAURANT
	*/
     "restaurants.db::RestaurantsContext.Restaurant" 
	  as "Restaurants" //key("RestaurantId")
	  navigates ("RestaurantToCategories"  as "Categories",
				"RestaurantToProducts"  as "Products",
				"RestaurantToStaff"       as "Staff",
				"RestaurantToTodayOrders" as "TodayOrders",
				"RestaurantToTodayOrdersCount" as "TodayOrdersCount",
				"RestaurantToTodayRevenue" as "TodayRevenue")
	  create events( before "xsjslib:Restaurant.xsjslib::BeforeCreate");
	
	association "RestaurantToCategories"
	principal "Restaurants"("RestaurantId")
	multiplicity "1"
	dependent "Categories"("RestaurantId")
	multiplicity "*";
	
	association "RestaurantToProducts"
	principal "Restaurants"("RestaurantId")
	multiplicity "1"
	dependent "Products"("RestaurantId")
	multiplicity "*";
	
	association "RestaurantToOrderItems"
	principal "Restaurants"("RestaurantId")
	multiplicity "1"
	dependent "OrderItems"("RestaurantId")
	multiplicity "*";

	association "RestaurantToCategories"
	principal "Restaurants"("RestaurantId")
	multiplicity "1"
	dependent "Categories"("RestaurantId")
	multiplicity "*";

	/*
		STAFF
	*/
	"restaurants.db::RestaurantsContext.Staff" as "Staff"
	//key("StaffId")
    navigates ("StaffToRestaurant"            as "Restaurants")
    create events (before "xsjslib:Staff.xsjslib::BeforeCreate");
	
	"restaurants.db::RestaurantsContext.RestaurantStaff" 
    as "RestaurantStaff";
	
	association "RestaurantToStaff" 
        principal "Restaurants"("RestaurantId") multiplicity "*" 
        dependent "Staff"("StaffId") multiplicity "*"
        over "restaurants.db::RestaurantsContext.RestaurantStaff" principal ("Restaurant.RestaurantId") dependent ("Staff.StaffId");
        
	association "StaffToRestaurant" 
        principal "Staff"("StaffId") multiplicity "*" 
        dependent "Restaurants"("RestaurantId") multiplicity "*"
        over "restaurants.db::RestaurantsContext.RestaurantStaff" principal ("Staff.StaffId") dependent ("Restaurant.RestaurantId");
        
    /*
		RESTAURANT ORDER
	*/
    "restaurants.db::RestaurantsContext.RestaurantOrder" as "Orders"
      navigates ("OrderToOrderItems"            as "Items",
    			 "OrderToStatus"        		as "Status",
    			 "OrderToPaymentMethod"         as "PaymentMethod",
    			 "OrderToAggregatedOrderItems"  as "AggregatedItems")
	create events (before "xsjslib:RestaurantOrder.xsjslib::BeforeCreate", postcommit "xsjslib:RestaurantOrder.xsjslib::AfterCreateOrModif")
	update events (postcommit "xsjslib:RestaurantOrder.xsjslib::AfterCreateOrModif");
	
	association "OrderToAggregatedOrderItems"
	principal "Orders"("RestaurantId","RestaurantOrderId")
	multiplicity "1"
	dependent "AggregatedOrderItems"("RestaurantId","RestaurantOrderId")
	multiplicity "1";
	
	association "OrderToOrderItems"
	principal "Orders"("RestaurantId","RestaurantOrderId")
	multiplicity "1"
	dependent "OrderItems"("RestaurantId","RestaurantOrderId")
	multiplicity "*";
	
	association "OrderToStatus"
	principal "Orders"("Status.StatusId")
	multiplicity "1"
	dependent "Statuses"("StatusId")
	multiplicity "1";
	
	association "OrderToPaymentMethod"
	principal "Orders"("PaymentMethod.PaymentMethodId")
	multiplicity "1"
	dependent "PaymentMethods"("PaymentMethodId")
	multiplicity "1";
	   
	   
	/*
		RESTAURANT ORDER ITEM
	*/   
	"restaurants.db::RestaurantsContext.RestaurantOrderItem" as "OrderItems" 
	navigates ("OrderItemToOrder" as "Order")
	create events (before "xsjslib:RestaurantOrderItem.xsjslib::BeforeCreate");
	
	association "OrderItemToOrder"
	principal "OrderItems"("RestaurantId","RestaurantOrderId")
	multiplicity "1"
	dependent "Orders"("RestaurantId","RestaurantOrderId")
	multiplicity "1";
	
	"restaurants.db::RestaurantsContext.RestaurantOrderItem" as "AggregatedOrderItems" 
	with("RestaurantId","RestaurantOrderId","Price")
	keys generate local "ID"
    aggregates always (SUM of "Price"); 
	
	/*
		PRODUCT
	*/
	"restaurants.db::RestaurantsContext.Product"  
	as "Products" navigates ("ProductToCategory" as "Category")
	create events (before "xsjslib:Product.xsjslib::BeforeCreate");
	
	association "ProductToCategory"
	principal "Products"("RestaurantId","Category.CategoryId")
	multiplicity "1"
	dependent "Categories"("RestaurantId","CategoryId")
	multiplicity "1";
	
	/*
		CATEGORY
	*/
	"restaurants.db::RestaurantsContext.Category" 
	as "Categories" 
	navigates ("CategoryToCategories" as "Categories",
			   "CategoryToProducts" as "Products",
			   "CategoryToIcon" as "Icon")
			   create events( before "xsjslib:Category.xsjslib::BeforeCreate" );
	
	association "CategoryToCategories"
	principal "Categories"("RestaurantId","CategoryId")
	multiplicity "1"
	dependent "Categories"("RestaurantId","ParentCategory.CategoryId")
	multiplicity "*";
	
	association "CategoryToProducts"
	principal "Categories"("RestaurantId","CategoryId")
	multiplicity "1"
	dependent "Products"("RestaurantId","Category.CategoryId")
	multiplicity "*";
	
	association "CategoryToIcon"
	principal "Categories"("Icon.IconId")
	multiplicity "1"
	dependent "Icons"("IconId")
	multiplicity "1";
	
	/*
		STATUS
	*/
	"restaurants.db::RestaurantsContext.Status" 
	as "Statuses";
	
	/*
		PAYMENT METHOD
	*/
	"restaurants.db::RestaurantsContext.PaymentMethod" 
	as "PaymentMethods";
	
	/*
		ICONS
	*/
	"restaurants.db::RestaurantsContext.Icons" 
	as "Icons";
	
	/*
		CUSTOMER
	*/
	"restaurants.db::RestaurantsContext.Customer" 
	as "Customers"
	navigates("CustomerToOrders" as "Orders")
	create using "xsjslib:Customer.xsjslib::Create";
	
	association "CustomerToOrders"
	principal "Customers"("CustomerId")
	multiplicity "1"
	dependent "Orders"("Customer.CustomerId")
	multiplicity "*";
	
	/*
		TODAY ORDERS
	*/
	"restaurants.db.views::TodayOrders" 
	as "TodayOrders" key ("RestaurantId","RestaurantOrderId") 
	navigates ("TodayOrderToStatus" as "Status",
	"TodayOrderToPaymentMethod" as "PaymentMethod",
	"TodayOrderToCustomer" as "Customer",
	"TodayOrderToOrderItems" as "Items",
	"TodayOrderToAggregatedOrderItems" as "AggregatedItems") ;
	
	association "TodayOrderToStatus"
	principal "TodayOrders"("Status.StatusId")
	multiplicity "1"
	dependent "Statuses"("StatusId")
	multiplicity "1";
	
	association "TodayOrderToPaymentMethod"
	principal "TodayOrders"("PaymentMethod.PaymentMethodId")
	multiplicity "1"
	dependent "PaymentMethods"("PaymentMethodId")
	multiplicity "1";
	
	association "TodayOrderToCustomer"
	principal "TodayOrders"("Customer.CustomerId")
	multiplicity "1"
	dependent "Customers"("CustomerId")
	multiplicity "1";
	
	association "TodayOrderToOrderItems"
	principal "TodayOrders"("RestaurantId","RestaurantOrderId")
	multiplicity "1"
	dependent "OrderItems"("RestaurantId","RestaurantOrderId")
	multiplicity "*";
	
	association "TodayOrderToAggregatedOrderItems"
	principal "TodayOrders"("RestaurantId","RestaurantOrderId")
	multiplicity "1"
	dependent "AggregatedOrderItems"("RestaurantId","RestaurantOrderId")
	multiplicity "1";
	
	association "RestaurantToTodayOrders"
	principal "Restaurants"("RestaurantId")
	multiplicity "1"
	dependent "TodayOrders"("RestaurantId")
	multiplicity "*";
     
    /*
		TODAY ORDERS COUNT
	*/
    "restaurants.db.views::RestaurantTodayOrdersCount" as "TodayOrdersCount"
	key("RestaurantId","StatusId") parameters via entity ;
    
    association via parameters "RestaurantToTodayOrdersCount"
    principal "Restaurants"("RestaurantId") multiplicity "1"
    dependent "TodayOrdersCount"("RESTAURANTID") multiplicity "*";
    
     /*
		TODAY REVENUE
	*/
    
    "restaurants.db.views::TodayRevenue" 
	as "TodayRevenue" keys("RestaurantId");
    
	association "RestaurantToTodayRevenue"
	principal "Restaurants"("RestaurantId")
	multiplicity "1"
	dependent "TodayRevenue"("RestaurantId")
	multiplicity "1";
    
}
settings {

  support null;

}








	

