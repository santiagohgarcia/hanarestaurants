service {
    "restaurants.db::RestaurantsContext.Restaurant" 
	  as "Restaurants"
	  navigates ("RestaurantToCategories"  as "Categories",
				"RestaurantToProducts"  as "Products",
				"RestaurantToStaff"       as "Staff",
				"RestaurantToTodayOrders" as "TodayOrders",
				"RestaurantToTodayOrdersCount" as "TodayOrdersCount",
				"RestaurantToTodayRevenue" as "TodayRevenue")
	  create events( before "xsjslib:Restaurant.xsjslib::BeforeCreate");
	
	association "RestaurantToCategories"
	principal "Restaurants"("RestaurantId")
	multiplicity "1"
	dependent "Categories"("RestaurantId")
	multiplicity "*";
	
	association "RestaurantToProducts"
	principal "Restaurants"("RestaurantId")
	multiplicity "1"
	dependent "Products"("RestaurantId")
	multiplicity "*";
	
	association "RestaurantToOrderItems"
	principal "Restaurants"("RestaurantId")
	multiplicity "1"
	dependent "OrderItems"("RestaurantId")
	multiplicity "*";

	association "RestaurantToCategories"
	principal "Restaurants"("RestaurantId")
	multiplicity "1"
	dependent "Categories"("RestaurantId")
	multiplicity "*";

	
	"restaurants.db::RestaurantsContext.RestaurantStaff" 
    as "RestaurantStaff";
	
	"restaurants.db::RestaurantsContext.Staff" 
    as "Staff"
    navigates ("StaffToRestaurant"            as "Restaurants")
    create events (before "xsjslib:Staff.xsjslib::BeforeCreate");
	
	association "RestaurantToStaff" 
        principal "Restaurants"("RestaurantId") multiplicity "*" 
        dependent "Staff"("StaffId") multiplicity "*"
        over "restaurants.db::RestaurantsContext.RestaurantStaff" principal ("Restaurant.RestaurantId") dependent ("Staff.StaffId");
        
	association "StaffToRestaurant" 
        principal "Staff"("StaffId") multiplicity "*" 
        dependent "Restaurants"("RestaurantId") multiplicity "*"
        over "restaurants.db::RestaurantsContext.RestaurantStaff" principal ("Staff.StaffId") dependent ("Restaurant.RestaurantId");
        
    "restaurants.db::RestaurantsContext.RestaurantOrder" as "Orders"
	create events (before "xsjslib:RestaurantOrder.xsjslib::BeforeCreate");
	    
	"restaurants.db::RestaurantsContext.RestaurantOrderItem" as "OrderItems" 
	create events (before "xsjslib:RestaurantOrderItem.xsjslib::BeforeCreate");
	
	"restaurants.db::RestaurantsContext.RestaurantOrderItem" as "AggregatedOrderItems" 
	with("RestaurantId","RestaurantOrderId","Price")
	keys generate local "ID"
    aggregates always (SUM of "Price"); 
	
	"restaurants.db::RestaurantsContext.Product"  
	as "Products" navigates ("ProductToCategory" as "Category")
	
	create events (before "xsjslib:Product.xsjslib::BeforeCreate");
	
	association "ProductToCategory"
	principal "Products"("RestaurantId","Category.CategoryId")
	multiplicity "1"
	dependent "Categories"("RestaurantId","CategoryId")
	multiplicity "1";
	
	"restaurants.db::RestaurantsContext.Category" 
	as "Categories" 
	navigates ("CategoryToCategories" as "Categories",
			   "CategoryToProducts" as "Products")
			   create events( before "xsjslib:Category.xsjslib::BeforeCreate" );
	
	association "CategoryToCategories"
	principal "Categories"("RestaurantId","CategoryId")
	multiplicity "1"
	dependent "Categories"("RestaurantId","ParentCategory.CategoryId")
	multiplicity "*";
	
	association "CategoryToProducts"
	principal "Categories"("RestaurantId","CategoryId")
	multiplicity "1"
	dependent "Products"("RestaurantId","Category.CategoryId")
	multiplicity "*";
	
	"restaurants.db::RestaurantsContext.Status" 
	as "Statuses";
	
	"restaurants.db::RestaurantsContext.Customer" 
	as "Customers";
	
	"restaurants.db.views::TodayOrders" 
	as "TodayOrders" key ("RestaurantId","RestaurantOrderId") 
	navigates ("TodayOrderToStatus" as "Status",
	"TodayOrderToCustomer" as "Customer",
	"TodayOrderToOrderItems" as "Items",
	"TodayOrderToAggregatedOrderItems" as "AggregatedItems") ;
	
	association "TodayOrderToStatus"
	principal "TodayOrders"("Status.StatusId")
	multiplicity "1"
	dependent "Statuses"("StatusId")
	multiplicity "1";
	
	association "TodayOrderToCustomer"
	principal "TodayOrders"("Customer.CustomerId")
	multiplicity "1"
	dependent "Customers"("CustomerId")
	multiplicity "1";
	
	association "TodayOrderToOrderItems"
	principal "TodayOrders"("RestaurantId","RestaurantOrderId")
	multiplicity "1"
	dependent "OrderItems"("RestaurantId","RestaurantOrderId")
	multiplicity "*";
	
	association "TodayOrderToAggregatedOrderItems"
	principal "TodayOrders"("RestaurantId","RestaurantOrderId")
	multiplicity "1"
	dependent "AggregatedOrderItems"("RestaurantId","RestaurantOrderId")
	multiplicity "1";
	
	association "RestaurantToTodayOrders"
	principal "Restaurants"("RestaurantId")
	multiplicity "1"
	dependent "TodayOrders"("RestaurantId")
	multiplicity "*";
     
    "restaurants.db.views::RestaurantTodayOrdersCount" as "TodayOrdersCount"
	key("RestaurantId","StatusId") parameters via entity ;
    
    association via parameters "RestaurantToTodayOrdersCount"
    principal "Restaurants"("RestaurantId") multiplicity "1"
    dependent "TodayOrdersCount"("RESTAURANTID") multiplicity "*";
    
    "restaurants.db.views::TodayRevenue" 
	as "TodayRevenue" keys("RestaurantId");
    
	association "RestaurantToTodayRevenue"
	principal "Restaurants"("RestaurantId")
	multiplicity "1"
	dependent "TodayRevenue"("RestaurantId")
	multiplicity "1";
    
}
settings {

  support null;

}








	

