namespace restaurants.db;

context RestaurantsContext {
    entity Restaurant {
        key RestaurantId : Integer; //Generated By Sequence
            Name         : String(50);
            CloseDayHour : Integer;
            Orders       : association[*] to RestaurantOrder on Orders.RestaurantId = RestaurantId;
            Creator      : String(50);
    }

    entity RestaurantStaff {
        key Restaurant : association[1] to RestaurantsContext.Restaurant { RestaurantId };
        key Staff      : association[1] to RestaurantsContext.Staff { StaffId };
    }

    entity Staff {
        key StaffId  : Integer; //Generated By Sequence
            Name     : String(50);
            LastName : String(50);
            UserId   : String(50);
            Creator  : String(50);
    }

    entity RestaurantOrder {
        key RestaurantId      : Integer;
        key RestaurantOrderId : Integer;
            Status            : association[1] to RestaurantsContext.Status { StatusId };
            Customer          : association[1] to RestaurantsContext.Customer { CustomerId };
            Items             : association[*] to RestaurantOrderItem                                   on     Items.RestaurantId      = RestaurantId
                                                                                                           and Items.RestaurantOrderId = RestaurantOrderId;
            Price             : Decimal(10, 2) null;
            CreatedAt         : UTCTimestamp;
            PaymentMethod     : association[1] to RestaurantsContext.PaymentMethod { PaymentMethodId };
            ReadyAt           : UTCTimestamp null;
    }

    entity PaymentMethod {
        key PaymentMethodId : String(15);
            Description     : String(15);
    }

    entity RestaurantOrderItem {
        key RestaurantId          : Integer;
        key RestaurantOrderId     : Integer;
        key RestaurantOrderItemId : Integer;
            ProductId             : Integer;
            ProductName           : String(100);
            Quantity              : Integer;
            Price                 : Decimal(10, 2);
            UnitPrice             : Decimal(10, 2);
    }

    entity Customer {
        key CustomerId     : String(100);
            Name           : String(100);
            ImageUrl       : String(400);
            MessagingToken : String(1000) null;
    }

    entity Status {
        key StatusId    : String(15);
            Description : String(15);
    }

    entity Category {
        key RestaurantId   : Integer;
        key CategoryId     : Integer;
            Description    : String(100);
            ParentCategory : association[0..1] to RestaurantsContext.Category { CategoryId } null;
            SubCategories  : association[0..*] to Category                                   on     SubCategories.RestaurantId              = RestaurantId
                                                                                                and SubCategories.ParentCategory.CategoryId = CategoryId;
            Products       : association[0..*] to Product                                    on     Products.RestaurantId        = RestaurantId
                                                                                                and Products.Category.CategoryId = CategoryId;
            Icon           : association[1]    to RestaurantsContext.Icons { IconId };
    }

    entity Product {
        key RestaurantId    : Integer;
        key Category        : association[1] to RestaurantsContext.Category { CategoryId };
        key ProductId       : Integer;
            Description     : String(500);
            Price           : Decimal(10, 2);
            NeedPreparation : Integer; //Boolean
            Image           : LargeString;
            Name            : String(100);
    }

    entity Icons {
        key IconId      : String(50);
            Description : String(100);
            Icon        : LargeString;
    }

    view RestaurantView as
        select from Restaurant
        {
            RestaurantId,
            Name,
            CloseDayHour,
            Creator
        }
        with structured privilege check;

    view StaffView as
        select from Staff
        {
            StaffId,
            Name,
            LastName,
            UserId,
            Creator
        }
        with structured privilege check;
};