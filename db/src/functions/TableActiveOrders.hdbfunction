FUNCTION "restaurants.db.functions::TableActiveOrders"( RESTAURANT_ID INTEGER, TABLE_ID INTEGER)
        RETURNS table (RESTAURANT_ID INTEGER,
       				  TABLE_ID INTEGER,
       				  ACTIVE_ORDERS BIGINT,
       				  TOTAL_PRICE DECIMAL(10,2),
       				  STATUS_ID INTEGER,
       				  STATUS_DESCRIPTION VARCHAR(50)
       )
       LANGUAGE SQLSCRIPT 
       SQL SECURITY INVOKER AS 
BEGIN 
RETURN 	SELECT RT."RestaurantId" as "RESTAURANT_ID", 
	    RT."RestaurantTableId" as "TABLE_ID" ,
		COUNT( DISTINCT RO."RestaurantOrderId") as "ACTIVE_ORDERS",
		SUM(OI."Price") as "TOTAL_PRICE",
		CASE COUNT( DISTINCT RO."RestaurantOrderId")
			WHEN 0 THEN 2 
			ELSE 1
		END AS "STATUS_ID",
		CASE COUNT( DISTINCT RO."RestaurantOrderId")
			WHEN 0 THEN ( SELECT "Description" FROM "restaurants.db::RestaurantsContext.TableStatus" WHERE "TableStatusId" = 2 ) 
			ELSE ( SELECT "Description" FROM "restaurants.db::RestaurantsContext.TableStatus" WHERE "TableStatusId" = 1 )
		END AS "STATUS_DESCRIPTION"
	  FROM "restaurants.db::RestaurantsContext.RestaurantTable" as RT
	  LEFT OUTER JOIN "restaurants.db::RestaurantsContext.RestaurantOrder" as RO
	  ON RT."RestaurantId" = RO."RestaurantId" AND
		RT."RestaurantTableId" = RO."RestaurantTableId" and 
		(RO."Status.StatusId" = 3 OR RO."Status.StatusId" = 2)
	  LEFT OUTER JOIN "restaurants.db::RestaurantsContext.RestaurantOrderItem" as OI
	  ON RO."RestaurantId" = OI."RestaurantId" AND
		RO."RestaurantTableId" = OI."RestaurantTableId" and 
		RO."RestaurantOrderId" = OI."RestaurantOrderId" 
	  WHERE RT."RestaurantId" = RESTAURANT_ID AND
		RT."RestaurantTableId" = TABLE_ID
		GROUP BY RT."RestaurantId", RT."RestaurantTableId";
END;

